to change port in application.properties
server.port=8081

Controller
@Controller
@ResponseBody - it will return whatever is returned by this message as is to the browser

View
JSP - java server pages

all jsp files should be created under
/src/main/resources/META-INF/resources/WEB-INF/jsp/sayHello.jsp

in application.properties
prefix=/src/main/resources/META-INF/resources/WEB-INF/jsp/
suffix=.jsp

logging.level.org.springframework=debug

to view jsp in tomcat server
<dependency>
	<groupId>org.apache.tomcat.embed</groupId>
	<artifactId>tomcat-embed-jasper</artifactId>
	<scope>provided</scope>
</dependency>

query paramaters
public String gotoLogin(@RequestParam String name) {


Model
http://localhost:8080/login?name=jom
public String gotoLogin(@RequestParam String name, ModelMap model) {
    model.put("nameToUseInJsp", name)
    return "login"
}

in jsp file to use variable
${nameToUseInJsp}

dispatcher servlet
A. receives HTTP Request
B. Processes HTTP Request
    B1. Identifies correct Controller method
        - based on request URL
    B2. Executes Controller method
        - Returns Model and View Name
    B3. Identifies correct View
        - Using ViewResolver
    B4. Executes view
C. Returns HTTP Response


@RequestMapping(value="login",method=RequestMethod.GET)

Request vs Model vs Session
Request Scope = active for a single request ONLY
    - once response is sent back, request attributes are removed from memory
    - cannot be used for future requests
    - recommended for most use cases
Session Scope = details stored across multiple requests
    - takes additional memory as all details are stored on server
@SessionAttributes("name")

Adding jstl(JavaServer Pages Tag Library) tags
import taglib in jsp file
<%@ taglib prefix="c" uri="jakarta.tags.core" %>

<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet" >
<script src="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
<script src="webjars/jquery/3.6.0/jquery.min.js"></script>

<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap</artifactId>
	<version>5.1.3</version>
</dependency>
 
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>jquery</artifactId>
	<version>3.6.0</version>
</dependency>

1. Spring boot starter validation
    - pom.xml
    <dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
2. command bean (form backing object)
    - 2-way binding(todo.jsp & TodoController.java)
3. add validations to Bean
    - Todo.java
    @Size(min=10, message="Enter atleast 10 characters")
    public String addNewTodoPage(ModelMap model,@Valid Todo todo, BindingResult result) {
4. Display validation errors in the view

@RequestMapping(value="add-todo", method= RequestMethod.POST)
public String addNewTodoPage(ModelMap model,@Valid Todo todo, BindingResult result) {
	if(result.hasErrors()) {
		return "todo";
	}
		
	String username = (String)model.get("name");
	todoService.addTodo(username, todo.getDescription(), LocalDate.now().plusYears(1), false);
	return "redirect:list-todos";
}

    <dependency>
    	<groupId>org.webjars</groupId>
    	<artifactId>bootstrap-datepicker</artifactId>
    	<version>1.9.0</version>
    </dependency>

<link href="webjars/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.standalone.min.css" rel="stylesheet" >
 
<fieldset class="mb-3">				
	<form:label path="description">Description</form:label>
	<form:input type="text" path="description" required="required"/>
	<form:errors path="description" cssClass="text-warning"/>
</fieldset>
<fieldset class="mb-3">				
	<form:label path="targetDate">Target Date</form:label>
	<form:input type="text" path="targetDate" required="required"/>
	<form:errors path="targetDate" cssClass="text-warning"/>
</fieldset>

spring.mvc.format.date=yyyy-MM-dd

<nav class="navbar navbar-expand-md navbar-light bg-light mb-3 p-1">
	<a class="navbar-brand m-1" href="https://courses.in28minutes.com">in28Minutes</a>
	<div class="collapse navbar-collapse">
		<ul class="navbar-nav">
			<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
			<li class="nav-item"><a class="nav-link" href="/list-todos">Todos</a></li>
		</ul>
	</div>
	<ul class="navbar-nav">
		<li class="nav-item"><a class="nav-link" href="/logout">Logout</a></li>
	</ul>	
</nav>

JSP fragments - used to remove duplicate code
1. move common html code to common/header.jspf, common/navigation.jspf etc
<%@ include file="common/navigation.jspf"%>

