spring initializer
start.spring.io

for rest api
in spring initializer go to add dependencies -> spring web

put @RestController annotation on Controller class
@RequestMapping("/courses") on method
@RequestMapping(method = RequestMethod.GET, path = "/hello-world")

spring boot starter projects
starters - convenient dependency descriptors for diff features

spring boot provides variety of starter projects
web application & rest api - spring boot starter web
unit tests- spring boot starter test
talk to database using jpa - spring boot starter data jpa
talk to database using jdbc - spring boot starter data jdbc
secure web app or rest api - spring boot starter security

spring boot dev tools
- auto restarts server for every code/property file change
- increase developer productivity, no need to manually restart server
- if pom.xml changed, need to manually restart
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-devtools</artifactId>
</dependency>

Get production ready
1. Profiles
application.properties for different profiles
create application-<profilename>.properties file
in original application.properties file add spring.profiles.active=<profilename>

#sample currency-service-url 
2. ConfigurationProperties - for externalized configuration and easy access to properties defined in properties files
@ConfigurationProperties(prefix="currency-service")
add properties
private String url

3. Spring boot Embedded servers - simpler way to deploy application instead of using war file and app server
step 1: install java
step 2: run jar file

4. Spring Boot Actuator - monitor and manage application in app
- provides a number of endpoints
    a. beans - Complete list of Spring beans in app
    b. health - Application health information
    c. metrics - Application metrics
    d. mappings - Details around Request Mappings
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>


JPA
- to view h2 console
1. add in properties- spring.h2.console.enable=true
2. go to localhost:8080/h2-console

- to configure h2 url
1.add in properties- spring.datasource.url=jdbc:h2:mem:<dbname>

- to create a table in h2
1. in src main resource new->sql file->schema.sql
create table course(
    id bigint not null,
    name varchar(255) not null,
    author varchar(255) not null,
    primary key (id)
);

inserting hardcoded data using Spring JDBC
1. private JdbcTemplate springJdbcTemplate; with @Autowired
2. springJdbcTemplate.update(sqlquery)
@Repository
public class CourseJdbcRepository {
	@Autowired
	private JdbcTemplate springJdbcTemplate;
	
	private static String INSERT_QUERY = 
		"""
		insert into course (id, name, author)
		values(?, ?, ?);
		""";
	
	public void insert(Course course) {
		springJdbcTemplate.update(INSERT_QUERY, course.getId(), course.getName(), 		course.getAuthor());
	}
}

command line runner - used to indicate that a bean should run. Autoruns run method after beans are instantiated
@Component
public class CourseJdbcCommandLineRunner implements CommandLineRunner{
	@Autowired
	private CourseJdbcRepository repository;
	
	@Override
	public void run(String... args) throws Exception {
		repository.insert();
	}
}

select query/find by id
public Course findById(long id) {
	//ResultSet -> Bean => Row Mapper =>
	//id
	return springJdbcTemplate.queryForObject(SELECT_QUERY, 
		new BeanPropertyRowMapper<>(Course.class), id);
		
}

jpa directly maps class to table (called an entity)
@Entity/@Entity(name="<tableName>")
@Id for primary key
@Column(name="<colName>") for mapping variables to columns, if match not mandatory
@PersistenceContext - more specific annotation instead of autowired for entitymanager

@Repository
@Transactional
public class CourseJpaRepository {
	@PersistenceContext
	EntityManager entityManager;
	
	public void insert(Course course) {
		entityManager.merge(course);
	}

	public Course findById(long id) {
		return entityManager.find(Course.class, id);
	}
	
	public void deleteById(long id) {
		Course course = entityManager.find(Course.class, id);
		entityManager.remove(course);
	}
}

@Component
public class CourseJpaCommandLineRunner implements CommandLineRunner{
	
	@Autowired
	private CourseJpaRepository repository;
	
	@Override
	public void run(String... args) throws Exception {
		repository.insert(new Course(1, "Learn AWS Jpa!", "in28minutes"));
		repository.insert(new Course(2, "Learn Azure Jpa!", "in28minutes"));
		repository.insert(new Course(3, "Learn DevOps Jpa!", "in28minutes"));
		repository.deleteById(1);
		
		System.out.println(repository.findById(2));
		System.out.println(repository.findById(3));
	}
	
}

step 1: map java bean to table
step 2: create Repository class with EntityManager variable

to show queries done by jpa add to properties
spring.jpa.show-sql=true

spring data jpa
step 1: map java bean to table
step 2: create interface that extends JpaRepository
public interface CourseSpringDataJpaRepository extends JpaRepository<Course, Long>
custom method(needs naming convention)
List<Course> findBy<variableName>(variable)

Spring security
<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-security</artifactId>
</dependency>

Launch MySQL using Docker
docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 mysql:8-oracle
