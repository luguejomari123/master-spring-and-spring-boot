try(var context = new AnnotationConfigApplicationContext(ConfigurationClass.class))) {

}

dependency injection - identify beans, their dependencies and wire them together (provides IOC or Inversion of Control)
inversion of control - let the framework create the objects
ioc container/context - manages the lifecycle of beans and dependencies

@Configuration
@Bean - any object that is managed by spring framework, usually on configuration classes
@Primary
@Qualifier("qualifierName")
@Component - when added to class, instance of class will be managed by spring framework
@ComponentScan("packageToScan") - tell spring where to find component classes
autowiring - process of wiring in dependencies for a spring bean
@Autowired - annotation used to tell spring if a dependency is to be autowired
context.getBeanDefinitionNames - list name of beans that are managed by spring

@bean vs @component annotation
component instantiating beans for own application code
bean for custom business logic, instantiating beans for 3rd party libraries

default initialization for spring beans is eager
lazy initialization annotation indicates whether bean is lazy initialized(not recommended and not frequently used)

eager initialization is recommended
- errors in the configuration are discovered immediately at app startup

spring bean scopes
normal class(no scope annotation) - singleton (stateless beans, same bean used across application)
prototype class - each time getbean is called, a different instance of bean is given(rarely used), used fo stateful beans(different user data,etc.)

scopes only for web-aware SpringApplicationContext
1. Request - one object instance per single http request
2. Session - one object instance per user HTTP session
3. Application - one object instance per web application runtime
4. Websocket - one object instance per WebSocket instance

Java Single (GOF) vs Spring Singleton
spring singleton - one object instance per spring ioc container
java singleton - one object instance per jvm

postconstruct and predestroy
@PostConstruct - used for initialization after dependencies are wired in (ex. fetching data from db)
@PreDestroy - usually for cleanup before a bean is removed from container or context



